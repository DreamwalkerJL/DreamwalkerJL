/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: bogdanzloy20280 (https://sketchfab.com/bogdanzloy20280)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/paint-brush-f74bfe01ca1e459b8c730a8881ea88bb
title: Paint Brush
*/

import {
  Cylinder,
  Float,
  Lightformer,
  MeshReflectorMaterial,
  Text,
  useGLTF,
  useMatcapTexture,
} from '@react-three/drei';
import * as THREE from 'three'
import { useFrame } from '@react-three/fiber';
import React, { useRef, useState } from 'react';
import { lerp } from 'three/src/math/MathUtils';
import { Select } from '@react-three/postprocessing';

export function Brush({choicePos, props}) {
  const { nodes, materials } = useGLTF('/brush/scene.gltf');

  const [matcap] = useMatcapTexture('2A6276_041218_739BA6_042941');
const groupRef = useRef()

function Podium() {
  return <> <group name="right" position={[3, 0, -3]} scale={1.2}>
  <Cylinder
    args={[1, 0.8, 0.25, 30]}
    rotation={[Math.PI, 0, 0]}
    position={[0, -0.4, 0]}
  >
    <MeshReflectorMaterial
      color="#ffffff"
      blur={[400, 100]}
      resolution={1024}
      mixBlur={1}
      opacity={2}
      depthScale={1.1}
      minDepthThreshold={0.4}
      maxDepthThreshold={1.25}
      roughness={1}
    />
  </Cylinder>
  <Cylinder
    args={[1, 0.56, 0.27, 30]}
    rotation={[Math.PI, 0, 0]}
    position={[0, -0.4, 0]}
  >
    <MeshReflectorMaterial
      color="#828282"
      blur={[400, 100]}
      resolution={1024}
      mixBlur={1}
      opacity={2}
      depthScale={1.1}
      minDepthThreshold={0.4}
      maxDepthThreshold={1.25}
      roughness={1}
    />
  </Cylinder>
  <Lightformer
    form="circle"
    scale={[0.8, 0.8]}
    rotation={[Math.PI * -0.5, 0, 0]}
    position={[0, -0.27, 0]}
    color={'#a9ffe4'}
    intensity={1.25}
  />
</group></>
}

const vec1 = new THREE.Vector3(0,0,0);
const vec2 = new THREE.Vector3(-3.75,0,3);
const vec3 = new THREE.Vector3(-7.75, 0, 0);

// if(choicePos === 1){
//   useFrame(() => groupRef.current.position.lerp(vec1, 0.001))
// }

useFrame((delta, time)=>{
  if(choicePos === 1){
    return groupRef.current.position.lerp(vec1, time * 2)
  } else if(choicePos === 2){
    return groupRef.current.position.lerp(vec2, time * 2)
} else if(choicePos === 3){
  return groupRef.current.position.lerp(vec3, time * 2)
} else {
  console.log('error')
}
})

;
const [hovered, hover] = useState(null);
  return (
    <Select  enabled={hovered}>
    <group ref={groupRef} >
      <group position={[.75, 0, 0]} >
        <Float
          speed={1} // Animation speed, defaults to 1
          rotationIntensity={0.5} // XYZ rotation intensity, defaults to 1
          floatIntensity={0.5} // Up/down float intensity, works like a multiplier with floatingRange,defaults to 1
          floatingRange={[0.5, 1]} // Range of y-axis values the object will float within, defaults to [-0.1,0.1]
        >
          <group
            {...props}
            dispose={null}
            scale={1.75}
            position={[3, 0.8, -3]}
            rotation={[1, 1.1, 1]}
          >
            <group rotation={[-Math.PI / 2, 0, 0]}>
              <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
                <group
                  position={[0, 2.79, 0]}
                  rotation={[-Math.PI / 2, 0, -1.32]}
                  scale={23.08}
                >
                  <mesh
                    geometry={nodes.brush001_Material007_0.geometry}
                    material={materials['Material.007']}
                  >
                    <meshMatcapMaterial matcap={matcap}/>
                  </mesh>
                </group>
                <group
                  position={[0, 2.79, 0]}
                  rotation={[-Math.PI / 2, 0, -1.32]}
                  scale={23.08}
                >
                  <mesh
                    geometry={nodes.brush002_Material009_0.geometry}
                    material={materials['Material.009']}
                  >
                    <meshMatcapMaterial matcap={matcap} />
                  </mesh>
                </group>
              </group>
            </group>
          </group>
        </Float>
       {/* <Podium/> */}
      </group>
      <Text
          font={'PermanentMarker.ttf'}
          fontSize={0.4}
          position={[3.75, -0.44, -1.5]}
          rotation={[Math.PI * -0.4, 0, 0]}
          color={'#a9ffe4'}
        >
                    Design
        </Text>
    </group>
    </Select> 
  );
}

useGLTF.preload('/brush/scene.gltf');
