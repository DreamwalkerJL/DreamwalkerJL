/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import {
  Box,
  Cylinder,
  Lightformer,
  MeshReflectorMaterial,
  useAnimations,
  useGLTF,
  useMatcapTexture,
} from '@react-three/drei';
import { useFrame, useLoader } from '@react-three/fiber';
import React, { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';


export function Char(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/CharModel.glb');
  const { actions, ref, names } = useAnimations(animations, group);
  const [index, setIndex] = useState(1);
  console.log(actions);
  console.log(index);
  useEffect(() => {
    // Reset and fade in animation after an index has been changed
    actions[names[index]].reset().play(); // .fadeIn(0.5)
    // In the clean-up phase, fade it out
    return () => actions[names[index]]; // .fadeOut(0.5)
  }, [index, actions, names]);
  const [matcap] = useMatcapTexture('965146_2B191D_DF7A5C_BFD6E1');


  const matRef = useRef();
  console.log(matRef);
  function Podium() {
    return (
      <group name="middle" scale={1.2}>
        <Cylinder
          args={[1, 0.8, 0.25, 30]}
          rotation={[Math.PI, 0, 0]}
          position={[0, -0.4, 0]}
        >
          <MeshReflectorMaterial
            color="#252525"
            blur={[400, 100]}
            resolution={1024}
            mixBlur={1}
            opacity={2}
            depthScale={1.1}
            minDepthThreshold={0.4}
            maxDepthThreshold={1.25}
            roughness={1}
          />
        </Cylinder>
        <Cylinder
          args={[1, 0.56, 0.27, 30]}
          rotation={[Math.PI, 0, 0]}
          position={[0, -0.4, 0]}
        >
          <MeshReflectorMaterial
            color="#252525"
            blur={[400, 100]}
            resolution={1024}
            mixBlur={1}
            opacity={2}
            depthScale={1.1}
            minDepthThreshold={0.4}
            maxDepthThreshold={1.25}
            roughness={1}
          />
        </Cylinder>
        <Lightformer
          form="circle"
          scale={[0.8, 0.8]}
          rotation={[Math.PI * -0.5, 0, 0]}
          position={[0, -0.27, 0]}
        />
      </group>
    );
  }

  return (
    <>
      <group ref={group} {...props} dispose={null} position={[0, -0.28, 0]} scale={1.4}>
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <group name="Ch44">
            <skinnedMesh
              name="Mesh"
              geometry={nodes.Mesh.geometry}
 
              skeleton={nodes.Mesh.skeleton}
            >
              {/* <meshStandardMaterial
                map={C1C}
                ref={matRef}
                roughness={4}
                roughnessMap={C1R}
                normalMap={C1N}
                metalnessMap={C1M}
                metalness={1.03}
              /> */}
              <meshMatcapMaterial matcap={matcap} opacity={1} transparent/>
            </skinnedMesh>
            <skinnedMesh
              name="Mesh_1"
              geometry={nodes.Mesh_1.geometry}

              skeleton={nodes.Mesh_1.skeleton}
            >
              {/* <meshStandardMaterial
                map={C2C}
                ref={matRef}
                roughness={4}
                roughnessMap={C2R}
                normalMap={C2N}
              /> */}
              <meshMatcapMaterial matcap={matcap} opacity={1} transparent/>
            </skinnedMesh>
          </group>
        </group>
        {/* <Box onClick={() => setIndex((index + 1) % names.length)} /> */}
      </group>
      <Podium />
    </>
  );
}

useGLTF.preload('/CharModel.glb');
