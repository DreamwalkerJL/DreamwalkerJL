/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { Box, useGLTF, useMatcapTexture } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import { Depth, Fresnel, LayerMaterial } from 'lamina';
import { useControls } from 'leva';
import React, { useRef } from 'react';
import * as THREE from 'three';
export default function LabObjects(props) {
  const { nodes, materials } = useGLTF('/LabGLB.glb');
  const [matcap, url] = useMatcapTexture('161B1F_C7E0EC_90A5B3_7B8C9B');
  const materialProps = useControls({
    thickness: { value: 5, min: 0, max: 20 },
    roughness: { value: 0, min: 0, max: 1, step: 0.1 },
    clearcoat: { value: 1, min: 0, max: 1, step: 0.1 },
    clearcoatRoughness: { value: 0, min: 0, max: 1, step: 0.1 },
    transmission: { value: 1, min: 0.9, max: 1, step: 0.01 },
    ior: { value: 1.25, min: 1, max: 2.3, step: 0.05 },
    envMapIntensity: { value: 25, min: 0, max: 100, step: 1 },
    color: '#ffffff',
    attenuationTint: '#ffffff',
    attenuationDistance: { value: 0, min: 0, max: 1 },
  });

  function EnvLamia() {
    const ref = useRef();
    const { gradient } = useControls({ gradient: { value: 0.7, min: 0, max: 1 } });

    useFrame((state) => {
      const cos = Math.cos(state.clock.elapsedTime / 2) * 70;
      const sin = Math.sin(state.clock.elapsedTime / 2) * 70;
      ref.current.layers[0].origin.set(cos / 2, 0, 0);
      ref.current.layers[1].origin.set(cos, sin, cos);
      ref.current.layers[2].origin.set(sin, cos, sin);
      ref.current.layers[3].origin.set(cos, sin, cos);
    });
    return (
      <mesh
        geometry={nodes.Cube.geometry}
        material={materials.lambert1}
        position={[0, 263.63, 0]}
        scale={[0.99, 0.99, 0.99]}
      >
        <LayerMaterial // Depth
          ref={ref}
          toneMapped={false}
          color={'gray'}
          side={THREE.BackSide}
        >
          <Depth
            colorA="blue"
            colorB="black"
            alpha={1}
            mode="normal"
            near={95 * 3.5 * gradient}
            far={95 * 3.5}
            origin={[0, 0, 0]}
          />
          <Depth
            colorA="red"
            colorB="#568ded"
            alpha={1}
            mode="add"
            near={87 * 14 * gradient}
            far={87 * 14}
            origin={[0, 1, 1]}
          />
          <Depth
            colorA="green"
            colorB="#5b49f8"
            alpha={1}
            mode="add"
            near={87 * 21 * gradient}
            far={87 * 21}
            origin={[0, 1, -1]}
          />
          <Depth
            colorA="white"
            colorB="red"
            alpha={1}
            mode="overlay"
            near={10 * 8 * gradient}
            far={10 * 8}
            origin={[1, -1, -1]}
          />
          <Fresnel mode="add" color="white" intensity={0.1} power={0.5} bias={0.05} />
          <Fresnel mode="add" color="#ef8989" intensity={0.1} power={0.5} bias={0.05} />
        </LayerMaterial>
      </mesh>
    );
  }
  return (
    <>
      <group {...props} dispose={null} scale={0.3}>
        <mesh
          geometry={nodes.Topowire_1.geometry}
          material={materials.lambert1}
          position={[0, 6, 0]}
        >
          <meshMatcapMaterial matcap={matcap} />
        </mesh>

        <mesh
          geometry={nodes.Oil_Tank_1.geometry}
          material={materials.lambert1}
          position={[0, 516.58, 0]}
        >
          <meshMatcapMaterial matcap={matcap} />
        </mesh>
        <mesh
          geometry={nodes.Oil_Tank.geometry}
          material={materials.lambert1}
          position={[0, 13.89, 0]}
        >
          <meshMatcapMaterial matcap={matcap} />
        </mesh>
        <mesh
          geometry={nodes.Cube.geometry}
          material={materials.lambert1}
          position={[0, 263.63, 0]}
        >
          <meshMatcapMaterial
            matcap={matcap}
            transparent
            opacity={0.4}
            side={THREE.BackSide}
          />
          <meshPhysicalMaterial {...materialProps} />
        </mesh>
        <EnvLamia />
      </group>
      <Box args={[20, 20, 20]} position={[0, 50, 0]} />
    </>
  );
}

useGLTF.preload('/LabGLB.glb');
