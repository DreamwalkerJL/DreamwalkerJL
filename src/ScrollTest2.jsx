/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useAnimations, useGLTF } from '@react-three/drei';
import React, { useEffect, useRef, useState } from 'react';

export function Model(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/ScrollTest3.glb');
  const { actions, ref, names } = useAnimations(animations, group);
  const [index, setIndex] = useState(0);
  useEffect(() => {
    // Reset and fade in animation after an index has been changed
    actions[names[index]].reset().fadeIn(0.5).play();
    // In the clean-up phase, fade it out
    return () => actions[names[index]].fadeOut(0.5);
  }, [index, actions, names]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group>
        <mesh
          onClick={() => setIndex((index + 1) % names.length)}
          name="cloth_parent_(Copy)"
          geometry={nodes['cloth_parent_(Copy)'].geometry}
          material={nodes['cloth_parent_(Copy)'].material}
          morphTargetDictionary={nodes['cloth_parent_(Copy)'].morphTargetDictionary}
          morphTargetInfluences={nodes['cloth_parent_(Copy)'].morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/ScrollTest3.glb');
