/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { Suspense, useEffect, useRef, useState } from 'react';
import { Html, useGLTF, useMatcapTexture, useVideoTexture} from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import Lottie from 'react-lottie';
import Title1 from '../Images/Title 11.json';
import { useControls } from 'leva';
import { useScroll } from 'framer-motion';
import CyberVideo from '../Images/CyberBackground3.mp4'
import { suspend } from 'suspend-react';
import * as THREE from 'three'
export function Screen5(props) {
  const { nodes, materials } = useGLTF('/Screen5.glb');
const {scrollYProgress} = useScroll()





// useFrame(()=> {
//   console.log(bool)
// })


  const BG2 = useVideoTexture(CyberVideo);


  const meshRef = useRef();

  const defaultOptions = {
    loop: false,
    autoplay: true,
    animationData: Title1,
    rendererSettings: {
      preserveAspectRatio: 'xMidYMid slice',
    },
  };


//   const [video, videoSet] = useState(() => {
//   const vid = document.createElement('video');
//   vid.src = 'CyberBackground3.mp4';
//   vid.crossOrigin = 'Anonymous';
//     vid.loop = true
//   vid.muted = true;
//   vid.play();
//   return vid;
// });
  // useEffect(()=> {
  //   scrollYProgress.current === 0 ? video.vid.play() : video.vid.pause()
  // },[])




// useFrame(()=> {
//   scrollYProgress.current === 0 ? vidRef.current.source.data.loop = true : vidRef.current.source.data.loop = false
// })
  return (
    <group>
      <group scale={3} position={[0, -1.6, 0]}>
        <group {...props} dispose={null} rotation={[0, Math.PI, 0]}>
          <mesh
            geometry={nodes.polySurface2.geometry}
            material={nodes.polySurface2.material}
            position={[0, 0.53, -0.73]}
            rotation={[Math.PI / 2, 0, -Math.PI]}
            scale={[1, 2, 0.43]}
          >
            <meshBasicMaterial map={BG2} ref={meshRef} >
            {/* <videoTexture attach="map" args={[video]} ref={vidRef}/> */}
            </meshBasicMaterial>
          </mesh>
        </group>
      </group>
    </group>
  );
}
useGLTF.preload('/Screen5.glb');
